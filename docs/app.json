[{"name":"app.R","content":"####\n#' Two Species Interaction Shiny App\n#' EEB3407\n#' Initial Code by George Furey\n#' Revised for Spring 2023 by Chris Wojan\n####\n\n## Load required libraries\nlibrary(shiny)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(deSolve)\n\n## Function to run differential equations of two species interaction\ntwo_sp_growth <- function(times, y, parms) {\n  with(as.list(c(y, parms)), {\n    dN1 <- N1 * (r1 + (s11 * N1) + (s12 * N2)) #basis RSN model\n    dN2 <- N2 * (r2 + (s22 * N2) + (s21 * N1)) #basis RSN model\n    return(list(c(dN1, dN2)))\n  })\n}\n\n## Setup the user interface\nui <- fluidPage(\n  titlePanel(\"Exploring Two-Species Interactions\"),\n  ## The sidebar includes all the editable parameters\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"r1\", HTML(paste0(\"Species 1 Growth Rate (r\", tags$sub('1'), \")\")), value = -1, min = -1.5, max = 1.5, step = 0.1),\n      sliderInput(\"r2\", HTML(paste0(\"Species 2 Growth Rate (r\", tags$sub('2'), \")\")), value = 0.4, min = -1.5, max = 1.5, step = 0.1),\n      sliderInput(\"s11\", HTML(paste0(\"Effect of Species 1 on 1 (s\", tags$sub('1,1'), \")\")), value = -0.2, min = -1.5, max = 0, step = 0.1),\n      sliderInput(\"s22\", HTML(paste0(\"Effect of Species 2 on 2 (s\", tags$sub('2,2'), \")\")), value = -0.2, min = -1.5, max = 0, step = 0.1),\n      sliderInput(\"s12\", HTML(paste0(\"Effect of Species 2 on 1 (s\", tags$sub('1,2'), \")\")), value = 1.5, min = -1.5, max = 1.5, step = 0.1),\n      sliderInput(\"s21\", HTML(paste0(\"Effect of Species 1 on 2 (s\", tags$sub('2,1'), \")\")), value = -1.3, min = -1.5, max = 1.5, step = 0.1),\n      sliderInput(\"N1\", HTML(paste0(\"Initial Species 1 Abundance (N\", tags$sub('1'), \")\")), value = 2, min = 0, max = 5, step = 0.5),\n      sliderInput(\"N2\", HTML(paste0(\"Initial Species 2 Abundance (N\", tags$sub('2'), \")\")), value = 1, min = 0, max = 5, step = 0.5),\n      radioButtons(\"time\", \"Max Timesteps\", choices = c(2, 10, 100), selected = 100),\n      withMathJax(helpText(\"Formula $$\\\\frac{1}{N_1}\\\\frac{dN_1}{dt} = r_1 + s_{1,1}N_1 + s_{1,2}N_2$$ \\n\n                           $$\\\\frac{1}{N_2}\\\\frac{dN_2}{dt} = r_2 + s_{2,2}N_1 + s_{2,1}N_1$$\"))\n          ),\n    ## The main display shows tabs, one for each plot, and a comparison\n    mainPanel(\n      tabsetPanel(\n       tabPanel(\"Pop. Size\", plotOutput(\"pop_size\")),\n       tabPanel(\"Phase Plot\", plotOutput(\"phase_plot\", width = \"600px\", height = \"600px\")),\n       tabPanel(\"Comparison\",fluidRow(plotOutput(\"pop_size2\"), plotOutput(\"phase_plot2\")))\n      )\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  ## Create a reactive conductor to run the differential equations\n  ## This can be called by separate outputs without rerunning the code\n  current_growth <- reactive({\n    ## Run differential equations and save as long data\n    ## i.e., species is a column\n    long <- data.frame(ode(y = c(N1 = input$N1, N2 = input$N2), \n                          times = seq_len(as.numeric(input$time) * 10) / 10, \n                          func = two_sp_growth,\n                          parms = c(\n                            r1 = input$r1, r2 = input$r2,\n                            s11 = input$s11, s22 = input$s22,\n                            s12 = input$s12, s21 = input$s21\n                          ),\n                          method = \"lsoda\",\n                          maxsteps = 20000\n    )) %>%\n      pivot_longer(cols = !time,\n                   names_to = \"species\",\n                   values_to = \"N\") %>%\n      group_by(species) %>%\n      mutate(dN = c(diff(N),NA), ## calculations for growth rates\n             per_capita = dN / N)\n    \n    ## Reformat data as wide for isocline plotting\n    wide <- long %>%\n      pivot_wider(names_from = species, values_from = c(\"N\", \"dN\", \"per_capita\")) %>%\n      rename(N1 = N_N1,\n             N2 = N_N2)\n    \n    ## return a list of both data organizations\n    return(list(long = long, wide = wide))\n  })\n  \n  ## Create a reactive conductor to store isocline slopes and intercepts\n  ## (currently only called by the phase plot output)\n  current_iso <- reactive({\n    tibble(N1_slope = -input$s11 / input$s12,\n           N2_slope = -input$s21 / input$s22,\n           N1_intercept = -input$r1 / input$s12,\n           N2_intercept = -input$r2 / input$s22,\n           N2_xintercept = -input$r2 / input$s21)\n  })\n  \n  ## Plot population over time\n  output$pop_size <- renderPlot({\n    ggplot(current_growth()$long, aes(x = time, y = N, color = species)) +\n      ## draw growth line\n      geom_line(aes(linetype = species), linewidth = 2) +\n      ## label axes\n      labs(x = \"Time\", y = \"Population Size\") +\n      ## specify legends\n      scale_color_manual(name = \"Species\", values = c(\"#d95f02\", \"#7570b3\")) +\n      scale_linetype_discrete(name = \"Species\") +\n      coord_cartesian(ylim = c(0, max(current_growth()$long$N))) +\n      theme_bw() +\n      theme(axis.text = element_text(size = 14), axis.title = element_text(size = 16),\n            legend.text = element_text(size = 14), legend.title = element_text(size = 16))\n  })\n  \n  ## Population plot with timestamps\n  output$pop_size2 <- renderPlot({\n    ggplot(current_growth()$long, aes(x = time, y = N, color = species)) +\n      ## draw growth line\n      geom_line(aes(linetype = species), alpha = 0.3, linewidth = 1) +\n      ## print timestamps\n      geom_text(data = current_growth()$long %>% \n                  filter(case_when(time <= 12 ~ (time%%1) == 0, \n                                   time <= 24 & time > 12 ~ (time%%2) == 0,\n                                   time >= 24 ~ (time%%4) == 0)), \n                aes(label = time)) +\n      ## label axes\n      labs(x = \"Time\", y = \"Population Size\") +\n      ## specify legends\n      scale_color_manual(name = \"Species\", values = c(\"#d95f02\", \"#7570b3\")) +\n      scale_linetype_discrete(name = \"Species\") +\n      coord_cartesian(ylim = c(0, max(current_growth()$long$N))) +\n      theme_bw() +\n      theme(axis.text = element_text(size = 14), axis.title = element_text(size = 16),\n            legend.text = element_text(size = 14), legend.title = element_text(size = 16))\n  })\n  \n  ## Plot isoclines on a phase plot\n  output$phase_plot <- renderPlot({\n    ggplot(current_growth()$wide, aes(x = N1, y = N2)) +\n      ## draw isoclines\n      with(current_iso(), geom_abline(slope = N1_slope, intercept = N1_intercept, color = \"#d95f02\", linewidth = 3)) +\n      with(current_iso(),\n           if(N2_slope %in% c(Inf, -Inf)){ ## if s22 is 0...\n             geom_vline(xintercept = N2_xintercept, color = \"#7570b3\", linewidth = 3)\n           } else {\n             geom_abline(slope = N2_slope, intercept = N2_intercept, color = \"#7570b3\", linewidth = 3)\n           }\n      ) +\n      ## draw invisible lines to force a color legend for isoclines\n      geom_line(data = current_growth()$long, aes(x = N, y = N, color = species), alpha = 0, linewidth = 3) +\n      ## draw points over time\n      geom_point(aes(fill = time), shape = 21, stroke = 0, size = 2) +\n      ## set scales, axes, etc.\n      scale_fill_viridis_c(name = \"Timestep\") +\n      scale_color_manual(name = \"Species Isocline\",\n                         values = c(\"N1\" = \"#d95f02\", \"N2\" = \"#7570b3\"),\n                         guide = guide_legend(override.aes = list(alpha = 1))) +\n      labs(x = \"N1\", y = \"N2\") +\n      coord_fixed(xlim = c(0, max(c(max(current_growth()$wide$N1), max(current_growth()$wide$N2)))),\n                  ylim = c(0, max(c(max(current_growth()$wide$N1), max(current_growth()$wide$N2))))) +\n      theme_bw() +\n      theme(legend.position = \"bottom\", axis.text = element_text(size = 14), axis.title = element_text(size = 16),\n            legend.text = element_text(size = 14), legend.title = element_text(size = 16))\n  })\n  \n  ## Isocline plot with timestamps\n  output$phase_plot2 <- renderPlot({\n    ggplot(current_growth()$wide, \n           aes(x = N1, y = N2)) +\n      ## draw isoclines\n      with(current_iso(), geom_abline(slope = N1_slope, intercept = N1_intercept, color = \"#d95f02\", linewidth = 3)) +\n      with(current_iso(),\n           if(N2_slope %in% c(Inf, -Inf)){ ## if s22 is 0...\n             geom_vline(xintercept = N2_xintercept, color = \"#7570b3\", linewidth = 3)\n           } else {\n             geom_abline(slope = N2_slope, intercept = N2_intercept, color = \"#7570b3\", linewidth = 3)\n           }\n      ) +\n      ## draw invisible lines to force color legend for isoclines\n      geom_line(data = current_growth()$long, aes(x = N, y = N, color = species), alpha = 0, linewidth = 3) +\n      ## draw points over time with timestamps\n      geom_point(aes(fill = time), shape = 21, stroke = 0, size = 2, alpha = 0.2) +\n      geom_text(data = current_growth()$wide %>% \n                  filter(case_when(time <= 12 ~ (time%%1) == 0, \n                                   time <= 24 & time > 12 ~ (time%%2) == 0,\n                                   time >= 24 ~ (time%%4) == 0)),\n                aes(label = time)) +\n      ## set scales, axes, etc.\n      scale_color_manual(name = \"Species Isocline\",\n                         values = c(\"N1\" = \"#d95f02\", \"N2\" = \"#7570b3\"),\n                         guide = guide_legend(override.aes = list(alpha = 1))) +\n      scale_fill_viridis_c(name = \"Timestep\") +\n      labs(x = \"N1\", y = \"N2\") +\n      coord_fixed(xlim = c(0, max(c(max(current_growth()$wide$N1), max(current_growth()$wide$N2)))),\n                  ylim = c(0, max(c(max(current_growth()$wide$N1), max(current_growth()$wide$N2))))) +\n      theme_bw() +\n      theme(legend.position = \"bottom\", axis.text = element_text(size = 14), axis.title = element_text(size = 16),\n            legend.text = element_text(size = 14), legend.title = element_text(size = 16))\n  })\n\n}\n\nshinyApp(ui, server)\n\n\n","type":"text"}]
